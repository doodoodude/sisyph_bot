#!/usr/bin/env python3
import rospy
import tf2_ros
from geometry_msgs.msg import TransformStamped, Quaternion
from fiducial_msgs.msg import FiducialTransformArray, FiducialTransform
from tf.transformations import quaternion_from_euler, euler_from_quaternion, quaternion_about_axis, quaternion_inverse, quaternion_multiply
# from sklearn.preprocessing import normalize

rospy.init_node("tasty_test")

tf_broadcaster = tf2_ros.TransformBroadcaster()

tf_quat1 = None 
tf_quat2 = None

def fiducial_transforms_cb(fid_msg: FiducialTransformArray):
    tf_msg1 = TransformStamped()
    tf_msg2 = TransformStamped()

    tf_msg1.header.frame_id = "map" #??????????????????????????????????????????
    tf_msg1.child_frame_id = "robot" # from usb_cam to robot #??????????????????????????????????????????
    tf_msg2.header.frame_id = "map" #??????????????????????????????????????????
    tf_msg2.child_frame_id = "usb_cam" # from map to usb_cam  #??????????????????????????????????????????

    tf_msg1.header.stamp = fid_msg.header.stamp
    tf_msg2.header.stamp = fid_msg.header.stamp

    # NEED TO LAUNCH rosrun tf static_transform_publisher 0 0 0 0 0 0 world map 5000

    for seq, fid_tf in enumerate(fid_msg.transforms):

        if fid_tf.fiducial_id == 42:
            tf_quat1 = [fid_tf.transform.rotation.x, fid_tf.transform.rotation.y, fid_tf.transform.rotation.z, fid_tf.transform.rotation.w]
            tf_msg1.transform = fid_tf.transform
            tf_broadcaster.sendTransform(tf_msg1)

        elif fid_tf.fiducial_id == 46:

        
            tf_quat2 = [fid_tf.transform.rotation.x, fid_tf.transform.rotation.y, fid_tf.transform.rotation.z, fid_tf.transform.rotation.w]
            # only_yaw = quaternion_from_euler(0,0,-euler_from_quaternion(tf_quat)[1],"rxyz")
            # tf_msg2.transform.rotation = Quaternion(*only_yaw)
            # tf_msg2.transform.translation.x = fid_tf.transform.translation.z
            # tf_msg2.transform.translation.y = fid_tf.transform.translation.y 

            inv_tf_quat2 = quaternion_inverse(tf_quat2) #??????????????????????????????????????????
            quat_from_map_to_robot = quaternion_multiply(tf_quat1, inv_tf_quat2) #??????????????????????????????????????????

            tf_msg2.transform.rotation = Quaternion(*quat_from_map_to_robot) #??????????????????????????????????????????
            tf_msg2.transform.translation = -fid_tf.transform.translation #??????????????????????????????????????????
            tf_broadcaster.sendTransform(tf_msg2)

# Subscribe to the /fiducial_transforms topic
fid_listener = rospy.Subscriber("/fiducial_transforms", FiducialTransformArray, fiducial_transforms_cb)

try:
    rospy.spin()
except KeyboardInterrupt:
    pass
